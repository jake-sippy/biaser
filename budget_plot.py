import os
import json
import argparse
import matplotlib
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# This is a list of the columns that the DataFrames used internally will hold
columns = [
    'Seed',
    'Dataset',
    'Model Type',
    'Explainer',
    'Budget',
    'Recall',
]

font = {'family' : 'DejaVu Sans', 'weight' : 'bold', 'size'   : 22}
matplotlib.rc('font', **font)

def setup_argparse():
    parser = argparse.ArgumentParser(description=
            'This script plots log data generated by bias_test.py')
    parser.add_argument(
            'dir',
            type=str,
            metavar='log_directory',
            help='The directory holding the log files')
    parser.add_argument(
            '-o', '--output',
            type=str,
            metavar='output',
            required=False,
            default='plot.png',
            help='The path to output the plot to')
    return parser


# Pass in the contents of a log file and recieve a DataFrame to append to the
# master DataFrame
def log_to_df(log_data):
    row = [
            log_data['seed'],
            log_data['dataset'],
            log_data['model_type'],
            log_data['explainer'],
            log_data['budget'],
            log_data['recall'],
    ]
    return pd.DataFrame([row], columns=columns)


if __name__ == '__main__':
    parser = setup_argparse()
    args = parser.parse_args()

    # This is the master df that will be plotted, log files will be added
    master_df = pd.DataFrame(columns=columns)

    # recursively search for log files
    print('Loading log files...')
    for root, _, files in os.walk(args.dir):
        for f in files:
            path = os.path.join(root, f)
            with open(path, 'r') as f:
                try:
                    data = json.load(f)
                except:
                    print(path)
                    raise ValueError
                new_df_rows = log_to_df(data)
                master_df = master_df.append(new_df_rows, ignore_index=True)

    explainers = [
            'Ground Truth',
            'Greedy',
            'LIME',
            'SHAP(zeros)',
            'SHAP(kmeans)',
            'SHAP(median)',
            'Random'
    ]
    data_exp = master_df['Explainer'].unique()
    explainers = [x for x in explainers if x in data_exp]
    hue_order = explainers
    master_df = master_df.loc[master_df['Explainer'].isin(explainers)]

    # Plot the master dataframe
    print('Building plot...')
    ax = sns.lineplot(
            data=master_df,
            x='Budget',
            y='Recall',
            hue='Explainer',
            hue_order=hue_order,
            err_style='bars',
            markers=True,
            dashes=False,
            style='Explainer',
    )

    xmin = master_df['Budget'].min() - 1
    xmax = master_df['Budget'].max() + 1

    # plt.ylim(bottom=0, top=1.1)
    # plt.xlim(left=xmin, right=xmax)
    # plt.tight_layout()
    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)

    # Save
    print('Saving plot to: {}'.format(args.output))
    plt.savefig(args.output, bbox_inches='tight')

    # Viz
    # plt.show()

