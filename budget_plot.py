import os
import json
import argparse
import matplotlib
import pandas as pd
import seaborn as sns
matplotlib.use('Agg') # Must be before importing matplotlib.pyplot (ssh only)
import matplotlib.pyplot as plt


# This is a list of the columns that the DataFrames used internally will hold
columns = [
    'Seed',
    'Dataset',
    'Model Type',
    'Bias Length',
    'Explainer',
    'Budget',
    'Recall',
]

font = {
    'weight' : 'bold',
    'size'   : 20
}
matplotlib.rc('font', **font)
sns.set_style('whitegrid')

def setup_argparse():
    parser = argparse.ArgumentParser(description=
            'This script plots log data generated by bias_test.py')
    parser.add_argument(
            'dir',
            type=str,
            metavar='log_directory',
            help='The directory holding the log files')
    parser.add_argument(
            '-o', '--output',
            type=str,
            metavar='output',
            required=False,
            default='plot.png',
            help='The path to output the plot to')
    return parser


# Pass in the contents of a log file and recieve a DataFrame to append to the
# master DataFrame
def log_to_df(log_data):
    row = [
            log_data['seed'],
            log_data['dataset'],
            log_data['model_type'],
            log_data['bias_len'],
            log_data['explainer'],
            log_data['budget'],
            log_data['recall'],
    ]
    return pd.DataFrame([row], columns=columns)


if __name__ == '__main__':
    parser = setup_argparse()
    args = parser.parse_args()

    # This is the master df that will be plotted, log files will be added
    master_df = pd.DataFrame(columns=columns)
    print('Loading log files...')
    for root, _, files in os.walk(args.dir):
        for f in files:
            path = os.path.join(root, f)
            with open(path, 'r') as f:
                try:
                    data = json.load(f)
                except:
                    print(path)
                    raise ValueError
                new_df_rows = log_to_df(data)
                master_df = master_df.append(new_df_rows, ignore_index=True)

    # Concrete order of explaiers on the plot, only thing that is important is
    # that ground truth goes at the bottom, since not every model has this
    # explainer
    explainers_order = [
            'Greedy',
            'LIME',
            'SHAP(zeros)',
            'SHAP(kmeans)',
            'SHAP(median)',
            'Random',
            'Ground Truth',
    ]
    explainers = []
    unique = master_df['Explainer'].unique()
    for x in explainers_order:
        if x in unique:
            explainers.append(x)
    lengths = master_df['Bias Length'].unique()
    print('Explainers:', explainers)
    print('Bias Lens: ', sorted(lengths))
    hue_order = explainers
    # master_df = master_df.loc[master_df['Explainer'].isin(explainers)]

    # Plot the master dataframe
    f, axes = plt.subplots(1, len(lengths), figsize=(7 * len(lengths) + 2, 7),
            sharey=True)
    axes = [axes] if len(lengths) == 1 else axes
    print('Building plot...')
    for i, length in enumerate(sorted(lengths)):
        data = master_df[ master_df['Bias Length'] == length ]
        ax = sns.lineplot(
                data=data,
                x='Budget',
                y='Recall',
                hue='Explainer',
                hue_order=hue_order,
                style='Explainer',
                style_order=hue_order,
                err_style='bars',
                markers=True,
                dashes=False,
                ax=axes[i],
        )
        ax.set_title('Bias Length = {}'.format(length))
        ax.get_legend().remove()

    handles, labels = axes[-1].get_legend_handles_labels()
    axes[-1].legend(
        handles[1:],
        labels[1:],
        frameon=True,
        bbox_to_anchor=(1.05, 1.00),
        loc='upper left',
        ncol=1
    )
    plt.ylim(0, 1.1)

    # plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)

    # Save
    print('Saving plot to: {}'.format(args.output))
    plt.savefig(args.output, bbox_inches='tight')

    # Viz
    # plt.tight_layout(rect=[0,0,1.1,1])
    # plt.show()
