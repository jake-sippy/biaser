import os
import json
import argparse
import matplotlib
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# This is a list of the columns that the DataFrames used internally will hold
columns = [
    'Seed',
    'Dataset',
    'Model Type',
    'Explainer',
    'Budget',
    'Error',
    'Error Type',
]

font = {'family' : 'DejaVu Sans', 'weight' : 'bold', 'size'   : 22}
matplotlib.rc('font', **font)

def setup_argparse():
    parser = argparse.ArgumentParser(description=
            'This script plots log data generated by bias_test.py')
    parser.add_argument(
            'dir',
            type=str,
            metavar='log_directory',
            help='The directory holding the log files')
    parser.add_argument(
            '-o', '--output',
            type=str,
            metavar='output',
            required=False,
            default='plot.png',
            help='The directory to output the plot to')
    return parser


# Pass in the contents of a log file and recieve a DataFrame to append to the
# master DataFrame
def log_to_df(log_data):
    row1 = [
            log_data['seed'],
            log_data['dataset'],
            log_data['model_type'],
            log_data['explainer'],
            log_data['n_features'],
            log_data['tp_error'],
            'Correct Exp.',
    ]

    row2 = [
            log_data['seed'],
            log_data['dataset'],
            log_data['model_type'],
            log_data['explainer'],
            log_data['n_features'],
            log_data['fn_error'],
            'Incorrect Exp.',
    ]
    return pd.DataFrame([row1, row2], columns=columns)


if __name__ == '__main__':
    parser = setup_argparse()
    args = parser.parse_args()

    # This is the master df that will be plotted, log files will be added
    master_df = pd.DataFrame(columns=columns)

    # recursively search for log files
    for root, _, files in os.walk(args.dir):
        for f in files:
            path = os.path.join(root, f)
            with open(path, 'r') as f:
                data = json.load(f)
                new_df_rows = log_to_df(data)
                master_df = master_df.append(new_df_rows, ignore_index=True)

    explainers = ['LIME', 'SHAP']
    hue_order = ['Correct Exp.', 'Incorrect Exp.']

    for explainer in explainers:
        # Plot the master dataframe
        data = master_df[ master_df['Explainer'] == explainer ]
        ax = sns.lineplot(
                data=data,
                x='Budget',
                y='Error',
                hue='Error Type',
                hue_order=hue_order,
                err_style='bars',
                markers=True,
                dashes=False,
                style='Error Type'
        )

        xmin = data['Budget'].min() - 1
        xmax = data['Budget'].max() + 1
        ymax = data['Error'].max() + 0.1

        plt.ylim(bottom=0, top=ymax)
        plt.xlim(left=xmin, right=xmax)
        plt.tight_layout()
        ext = '_{}.png'.format(explainer)
        plt.savefig(args.output + ext, bbox_inches='tight')
        plt.clf()
